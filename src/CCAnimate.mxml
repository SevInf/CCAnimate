<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:gnat="com.goodnamesaretaken.CCAnimate.*"
					   minWidth="800"
					   minHeight="600"
					   >
	<fx:Declarations>
		<fx:XML format="e4x" id="menuData">
			<root>
				<menuitem label="File">
					<menuitem label="New project" enabled="false"/>
					<menuitem id="save" label="Save project"/>
					<menuitem label="Open project" enabled="false"/>
					<menuitem id="export" label="Export animations" enabled="false" />
				</menuitem>
			</root>
		</fx:XML>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.goodnamesaretaken.CCAnimate.Animation;
			import com.goodnamesaretaken.CCAnimate.Frame;
			
			import mx.collections.ArrayList;
			import mx.events.FlexNativeMenuEvent;
			
			[Bindable]
			private var _animations: ArrayList = new ArrayList();
			
			[Bindable]
			private var _library: ArrayList = new ArrayList();
			
			
			private function addImagesToLibrary(e: Event):void {
				var file: File = new File();
				
				file.browseForOpenMultiple("Choose file to add", [new FileFilter("PNG Files", "png")]);
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, imageFilesSelected);
			
			}
			
			private function removeImageFromLibrary(e: Event):void {
				_library.removeItem(libraryList.selectedItem);
			}
			
			private function toggleAnimationPlayback():void {
				preview.play();
			}
			
			private function addAnimation(e: Event): void {
				var animation:Animation = new Animation();
				animation.name = "Animation " + (_animations.length + 1);
				
				_animations.addItem(animation);
				animationsList.selectedItem = animation;
			}
			
			private function removeAnimation(e: Event): void {
				_animations.removeItem(animationsList.selectedItem);
			}
			
			private function imageFilesSelected(e: FileListEvent):void {
				for each (var f: File in e.files) {		
					_library.addItem(Frame.fromFile(f));	
				}
			}
			
			
			private function menuItemClick(event:FlexNativeMenuEvent): void {
				var itemId:String = event.item.@id;
				if (itemId == "save") {
					var f:File = new File();
					f.addEventListener(Event.SELECT, saveProjectFileSelected);
					f.browseForSave("Save project");
				}
				
			}
			
			private function serializeProjectAsXML(projectFileDirectory: File): XML {
				var output:XML = <project></project>;
				var libraryXML: XML = <library />;
				
				for each (var frame: Frame in _library.source) {
					var item: XML = <file />;
					item.@path = projectFileDirectory.getRelativePath(new File(frame.originalPath));
					libraryXML.appendChild(item);
				}
				output.appendChild(libraryXML);
				
				var animationsXML: XML = <animations/>;
				for each (var animation: Animation in _animations.source) {
					var animationXML: XML = <animation />;
					animationXML.@name = animation.name;
					animationXML.@interval = animation.frameInterval;
					
					for each (var _frame: Frame in animation.frames.source) {
						var frameXML: XML = <frame />;
						frameXML.@name = _frame.name;
						animationXML.appendChild(frameXML);
					}
					
					animationsXML.appendChild(animationXML);
				}
				output.appendChild(animationsXML);
				return output;
			}
			
			private function saveProjectFileSelected(event: Event):void {
				var data: XML = serializeProjectAsXML(File(event.target.parent));
				var fileStream:FileStream = new FileStream();
			
				fileStream.open(File(event.target), FileMode.WRITE);

				fileStream.writeUTFBytes('<?xml version="1.0" encoding="UTF-8"?>\n');
				fileStream.writeUTFBytes(data.toXMLString());
				fileStream.close();
			}
			
			
		]]>
	</fx:Script>
	
	<s:menu>
		<mx:FlexNativeMenu dataProvider="{menuData}" labelField="@label" showRoot="false" itemClick="menuItemClick(event)" />
			
	</s:menu>
	
	<s:layout>
		<s:HorizontalLayout />
	</s:layout>
	
	<s:Panel height="100%" width="20%" minWidth="250" title="Animations">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		
		<s:controlBarContent>
			<s:Button label="Add animation" click="addAnimation(event)" />
			<s:Button label="Remove animation" click="removeAnimation(event)" enabled="{animationsList.selectedItem != null}" />
		</s:controlBarContent>
		
		<s:List id="animationsList" 
				width="100%" height="100%" 
				dataProvider="{_animations}" 
				itemRenderer="com.goodnamesaretaken.CCAnimate.AnimationListItemRenderer">
			
			<s:layout>
				<s:VerticalLayout paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"/>		
			</s:layout>
			
		</s:List>
	</s:Panel>
	
	<s:Group height="100%" width="80%">
		<s:layout>
			<s:VerticalLayout verticalAlign="bottom" horizontalAlign="center"/>
		</s:layout>
		
		<gnat:AnimationPreview id="preview" 
							   frames="{animationsList.selectedItem.frames}" 
							   frameInterval="{animationsList.selectedItem.frameInterval}" />
		
		<s:Panel title="Timeline" width="100%">
			<s:controlBarContent>
				
				<s:Label text="Frame interval" width="20%" minWidth="100" />
				
				<s:HSlider id="frameSlider" stepSize="0.001" minimum="0.001" maximum="1" 
						   width="80%" 
						   value="@{animationsList.selectedItem.frameInterval}"/>
				
				<s:Button label="Play" click="toggleAnimationPlayback()"/>
				
			</s:controlBarContent>
			
			<s:List id="timelineList"
					dataProvider="{animationsList.selectedItem.frames}" 
					width="100%" height="100%" 
					dragEnabled="true" dropEnabled="true" dragMoveEnabled="true"
					itemRenderer="com.goodnamesaretaken.CCAnimate.TimelineItemRenderer">
				
				<s:layout>
					<s:HorizontalLayout gap="10" verticalAlign="bottom" 
										paddingTop="10" paddingBottom="10" 
										paddingLeft="10" paddingRight="10"/>
				</s:layout>
				
			</s:List>
		</s:Panel>
		
		
		<s:Panel title="Library" width="100%">
			<s:controlBarContent>
				
				<s:Button label="Add Image" click="addImagesToLibrary(event)" />
				
				<s:Button label="Remove Image" 
						  click="removeImageFromLibrary(event)" 
						  enabled="{libraryList.selectedItem != null}" />
				
			</s:controlBarContent>
			
			<s:List id="libraryList"
					dataProvider="{_library}" width="100%" height="100%" 
					itemRenderer="com.goodnamesaretaken.CCAnimate.LibraryItemRenderer"
					dragEnabled="true">
				
				<s:layout>
					<s:HorizontalLayout gap="10" verticalAlign="bottom" 
										paddingTop="10" paddingBottom="10" 
										paddingLeft="10" paddingRight="10"/>
				</s:layout>
			</s:List>
		</s:Panel>
		
		
	</s:Group>
	
	
</s:WindowedApplication>
